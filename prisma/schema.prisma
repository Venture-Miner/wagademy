generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String           @unique
  idRefAuth      String           @unique
  walletAddress  String?
  accountType    AccountTypeEnum
  userProfile    UserProfile?
  job            Job[]
  jobApplication JobApplication[]
  companyProfile CompanyProfile?
  chatBots       ChatBot[]
  invitations    Invitation[]
  transactions   Transaction[]
}

model CompanyProfile {
  id                         String     @id @default(auto()) @map("_id") @db.ObjectId
  name                       String
  about                      String
  companyPhoto               ImageFile? @relation(name: "companyPhoto", fields: [companyPhotoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  companyPhotoId             String?    @db.ObjectId
  areaOfExpertise            String
  whatIsTheCompanyLookingFor String[]
  user                       User       @relation(fields: [userId], references: [id])
  userId                     String     @unique @db.ObjectId
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
}

model UserProfile {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String                   @unique
  dateOfBirth            DateTime
  contactNumber          String
  country                String
  state                  String
  about                  String
  education              Education[]
  professionalExperience ProfessionalExperience[]
  areasOfExpertise       String[]
  skillsAndCompetencies  String[]
  user                   User                     @relation(fields: [userId], references: [id])
  userId                 String                   @unique @db.ObjectId
  profilePhoto           ImageFile?               @relation(name: "profilePhoto", fields: [profilePhotoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profilePhotoId         String?                  @db.ObjectId
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model Education {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  institution   String
  course        String
  degree        String
  description   String?
  stillStudying Boolean
  startDate     DateTime
  endDate       DateTime?
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?      @db.ObjectId
}

model ProfessionalExperience {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  company              String
  jobTitle             String
  currentlyWorkingHere Boolean
  startDate            DateTime
  endDate              DateTime?
  description          String?
  userProfile          UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId        String?      @db.ObjectId
}

model ImageFile {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  key            String           @unique
  userProfile    UserProfile[]    @relation(name: "profilePhoto")
  companyProfile CompanyProfile[] @relation(name: "companyPhoto")
  chatBot        ChatBot[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Job {
  id                       String                       @id @default(auto()) @map("_id") @db.ObjectId
  title                    String
  description              String
  employmentClassification EmploymentClassificationEnum
  allocation               AllocationEnum
  aiInterviewQuestions     String[]
  views                    Int                          @default(0)
  company                  User                         @relation(fields: [companyId], references: [id])
  companyId                String                       @db.ObjectId
  jobApplications          JobApplication[]
  jobStatus                JobStatusEnum                @default(PUBLISHED)
  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt
}

model JobApplication {
  id                String                   @id @default(auto()) @map("_id") @db.ObjectId
  job               Job                      @relation(fields: [jobId], references: [id])
  jobId             String                   @db.ObjectId
  user              User                     @relation(fields: [userId], references: [id])
  userId            String                   @db.ObjectId
  applicationStatus JobApplicationStatusEnum
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  jobInterviewChat  JobInterviewChat[]
}

model JobInterviewChat {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String
  history          Json
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String         @db.ObjectId
}

model ChatBot {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  idRefOpenAI  String
  name         String
  about        String
  user         User              @relation(fields: [userId], references: [id])
  userId       String            @db.ObjectId
  status       ChatBotStatusEnum @default(PROCESSING)
  transactions Transaction[]
  invitations  Invitation[]
  thumbnail    ImageFile         @relation(fields: [thumbnailId], references: [id])
  thumbnailId  String            @db.ObjectId
  createdAt    DateTime          @default(now())
}

model Invitation {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  chatBot   ChatBot @relation(fields: [chatBotId], references: [id])
  chatBotId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
}

model Transaction {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  chatBot   ChatBot @relation(fields: [chatBotId], references: [id])
  chatBotId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
}

enum ChatBotStatusEnum {
  PROCESSING
  SUCCESS
  FAIL
}

enum AccountTypeEnum {
  COMPANY
  PHYSICAL_PERSON
}

enum AllocationEnum {
  REMOTE
  HYBRID
  ON_SITE
}

enum EmploymentClassificationEnum {
  FULL_TIME
  CONTRACT
  PART_TIME
  TEMPORARY
  INTERNSHIP
  OTHER
}

enum JobStatusEnum {
  PUBLISHED
  UNPUBLISHED
}

enum JobApplicationStatusEnum {
  SUBSCRIBED
  INVITED
  INTERVIEWED
}
